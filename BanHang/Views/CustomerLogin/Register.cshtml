@model BanHang.Models.User
@{
    ViewBag.Title = "Register";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<link rel="stylesheet" type="text/css" href="~/Content/assets/styles/main_styles.css">

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css">
<style>
    /* Thêm đoạn CSS để tạo viền ngoài bo cho form */
    .custom-border {
        border: 1px solid #ccc;
        border-radius: 10px;
        padding: 30px;
        background-color: #f9f9f9;
        box-shadow: 0px 0px 15px rgba(0, 0, 0, 0.1);
    }

    .form-title {
        text-align: center;
        font-size: 24px;
        font-weight: bold;
        margin-bottom: 30px;
    }

    .form-group {
        margin-bottom: 20px;
    }

    .form-control {
        border-radius: 5px;
    }
</style>
@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="container" style="margin-top:180px;">
        <div class="row justify-content-center">
            <div class="col-md-6 custom-border">
                <h2 class="form-title">ĐĂNG KÝ</h2>
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })

                <div class="form-group">
                    @Html.LabelFor(model => model.UserName, htmlAttributes: new { @class = "control-label" })
                    @Html.EditorFor(model => model.UserName, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.UserName, "", new { @class = "text-danger" })
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Password, htmlAttributes: new { @class = "control-label" })
                    @Html.PasswordFor(model => model.Password, new { @class = "form-control", id = "password" })
                    @Html.ValidationMessageFor(model => model.Password, "", new { @class = "text-danger" })
                </div>

                <div class="form-group position-relative">
                    @Html.Label("ConfirmPassword", "Xác nhận mật khẩu", new { @class = "control-label" })
                    @Html.Password("ConfirmPassword", null, new { @class = "form-control", id = "confirmPassword" })
                    <span id="confirmPasswordMatch" class="position-absolute" style="right: 10px; bottom: 10px;"></span>
                </div>



                <div class="form-group">
                    @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label" })
                    @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Phone, htmlAttributes: new { @class = "control-label" })
                    @Html.EditorFor(model => model.Phone, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Phone, "", new { @class = "text-danger" })
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Address, htmlAttributes: new { @class = "control-label" })
                    @Html.EditorFor(model => model.Address, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Address, "", new { @class = "text-danger" })
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "control-label" })
                    @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
                </div>
                <div class="input-group-append">
                    <div class="input-group-text">
                        <input type="checkbox" id="showPasswordCheckbox"> Hiện mật khẩu
                    </div>
                </div>

                <div class="form-group row justify-content-center">
                    <div class="col-md-6">
                        <input type="submit" value="Đăng ký" class="btn btn-primary btn-block" style="width:100px;float:right;" />
                    </div>
                    <div class="col-md-6">
                        @Html.ActionLink("Quay lại", "Index", "Home", null, new { @class = "btn btn-secondary btn-block", style = "width: 100px;" })
                    </div>

                </div>

                <div class="signin text-center">
                    <span>Bạn đã có tài khoản? <a href="@Url.Action("Index", "CustomerLogin")">Đăng nhập ngay</a></span>
                </div>
            </div>
        </div>
    </div>
}

@section Scripts {
    <script>
        // Kiểm tra sự khớp nhau của mật khẩu và mật khẩu xác nhận
        $(document).ready(function () {
            $('#confirmPassword').on('keyup', function () {
                var password = $('#password').val();
                var confirmPassword = $('#confirmPassword').val();
                var confirmPasswordMatch = $('#confirmPasswordMatch');

                if (password === confirmPassword) {
                    confirmPasswordMatch.html('<i class="fas fa-check text-success"></i>');
                } else {
                    confirmPasswordMatch.html('<i class="fas fa-times text-danger"></i>');
                }
            });
        });

    </script>


    <script>
        const showPasswordCheckbox = document.querySelector('#showPasswordCheckbox');
        const passwordInput = document.querySelector('#password');

        const confirmPassword = document.querySelector('#confirmPassword');
        showPasswordCheckbox.addEventListener('change', function () {
            passwordInput.type = this.checked ? 'text' : 'password';
            confirmPassword.type = this.checked ? 'text' : 'password';
        });
    </script>

}
